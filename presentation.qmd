---
format: 
  revealjs:
    slide-number: true
    theme: [default, custom_theme.scss]
    preview-links: auto
    output-file: "index"
    output-ext: "html"
    logo: "Materials/About/personal_sticker.png"
    code-line-numbers: false
    code-overflow: wrap
    code-link: false
    embed-resources: true
    center-title-slide: false
    include-in-header: "fonts-include.html"
---

```{r}
#| label: setup
#| include: false
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
  fig.align = "center",
  out.width = "100%",
  dpi = 300,
  fig.align = "center"
)

if (!require("renv")) install.packages("renv")
library(renv)
renv::restore(prompt = FALSE)

if (!require("countdown")) install.packages("countdown")
library(countdown)

if (!require("here")) install.packages("here")
library(here)


if (!require("jsonlite")) install.packages("jsonlite")
library(jsonlite)

if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)

if (!require("qrcode")) install.packages("qrcode")
library(qrcode)

if (!require("cropcircles")) install.packages("cropcircles")
library(cropcircles)

include_local_figure <- function(data_source) {
  knitr::include_graphics(
    path = here::here(
      "Materials",
      data_source
    ),
    error = TRUE
  )
}
```


```{r}
#| label: dynamic-theme
#| include: false
library(jsonlite)

# Colors

colors <-
  jsonlite::fromJSON(
    here::here("colors.json")
  )

colors_definition <-
  purrr::imap(
    .x = colors,
    .f = ~ {
      paste0(
        "$", .y, ": ", unname(.x), ";", "\n",
        ".reveal .bg-", .y, " { background-color: ", unname(.x), "; }\n",
        ".text-color-", .y, " { color: ", unname(.x), " !important ; }\n",
        ".text-background-", .y, " {\n",
        "background-color: ", unname(.x), ";\n",
        "padding: $smallMargin;\n",
        "border-radius: 5px;\n",
        " }", "\n"
      )
    }
  ) %>%
  paste(collapse = "\n")


writeLines(
  text = c(
    "// This file is auto-generated from colors.json. Do not edit directly.",
    colors_definition
  ),
  con = here::here("_colors.scss")
)

# Fonts

fonts <-
  jsonlite::fromJSON(
    here::here("fonts.json")
  )

fonts_definition <-
  c(
    paste0('$mainFont: "', fonts$body, '", "Arial", sans-serif !default;\n'),
    paste0('$headingFont: "', fonts$heading, '", "Courier New", monospace !default;\n'),
    paste0(
      ".text-font-body { font-family: $mainFont; }\n",
      ".text-font-heading { font-family: $headingFont; }\n"
    ),
    paste0(
      "/* Debug font loading - this will help us see if the font is loaded */\n",
      "@supports (font-family: \"", fonts$heading, "\") {\n",
      "  .debug-font-loaded::before {\n",
      "    content: \"", fonts$heading, " font is supported\";\n",
      "    display: block;\n",
      "    font-size: 12px;\n",
      "    color: green;\n",
      "  }\n",
      "}\n\n",
      "/* Force font loading for debugging */\n",
      ".force-press-start {\n",
      "  font-family: \"", fonts$heading, "\", monospace !important;\n",
      "  font-display: swap;\n",
      "}\n"
    )
  )

writeLines(
  text = c(
    "// This file is auto-generated from fonts.json. Do not edit directly.",
    fonts_definition
  ),
  con = here::here("_fonts.scss")
)

```

# [VegVault]{.bold .r-fit-text .text-shadow-light} {.bg-black .text-center .text-color-beigeLight .text-margin-top}

<br>

[   --- press START to begin ---   ]{.text-center .r-fit-text .text-font-heading} 

<br>

P1: [👤Ondřej Mottl](https://ondrejmottl.github.io/)

IAVS, Colorado, USA

2025-08-02


# 🎥Intro {.text-center background-image="Materials/poster_export/gb_ds.png" background-opacity="0.50"}

<br>

:::{.blockquote .fragment}
Most biodiversity models rely exclusively on **contemporary** data

::: {.fragment}
❌ yet ecosystems evolve over millennia!
::: 

:::

<br>

:::{.blockquote .fragment .text-center}
There are **many** biodiversity databases

::: {.fragment}
❌ but fragmented across disciplines and repositories!
:::

:::

<br>

:::{.blockquote .fragment .text-center}
What if we could integrate vegetation, climate, traits, and time into one coherent system? 🤔
:::

## 🧙Player 1 {background-image="Materials/poster_export/gb_ds.png" background-opacity="0.20"}

:::: {.columns}

::: {.column width="25%"}
```{r}
#| label: personal sticker
include_local_figure("poster_export/c1.png")
```

:::


::: {.column width="75%"}

<br>

### [Ondrej Mottl]{.bold .r-fit-text .text-color-white .text-font-heading .text-shadow-dark}
Assistant Professor at [Charles University](https://cuni.cz/UK-1.html)

Head of the 🧑‍💻 [Laboratory of Quantitative Ecology](https://ondrejmottl.github.io/lab/about_the_lab.html)

:::

::::

:::: {.columns}

::: {.column width="30%"}

```{r}
#| label: linktree QR
include_local_figure("QR/qr_linktree.png")
```
:::

::: {.column width="10%"}
:::

::: {.column width="60%"}

* 📧 ondrej.mottl(at)gmail.com
* 🦋 [ondrejmottl.bsky.social](https://bsky.app/profile/ondrejmottl.bsky.social)
* 🐱 [Github](https://github.com/OndrejMottl)
* 🆔 [ORCID](https://orcid.org/0000-0002-9796-5081)
* 🌐 [Personal webpage](https://ondrejmottl.github.io/)
:::

::::

## 🕹️Level0: The Quest

- *Mission:* "Did vegetation in the Rocky Mountains maintain functional stability from the LGM to the present?"
- Requirements:
  - Fossil pollen and modern vegetation plots  
  - Functional traits (e.g. height, SLA, wood density)  
  - Climate data from past and present
- Obstacles:
  - Scattered formats, inconsistent taxonomies, climate rasters  
  - Multiple tools, steep learning curves, and limited reproducibility

## 🔓The Shortcut

- Imagine answering this question with just a few lines of code  
- Use `{vaultkeepr}` to:
  - Access vegetation, trait, and climate data simultaneously  
  - Filter by time range, spatial boundaries, and taxa  
  - Harmonise taxonomy and calculate community-weighted traits
- Minimal code, maximum reproducibility

## 🆙LevelUp: VegVault

- A global SQLite database integrating plot-based paleo- and neo-vegetation data  
- Links to functional traits, soil properties, and climate variables  
- Built for millennial-scale ecological analyses  
- Fully open-source and reproducible infrastructure

## 🗃️The Source Code

- Data sources: Neotoma, BIEN, sPlotOpen, TRY, CHELSA, WoSIS  
- Taxonomic harmonisation via GBIF and `{taxospace}`  
- Abiotic data mapped to spatio-temporal grids  
- Modular, version-controlled pipelines with metadata

## 💎Key Innovations

- Temporal integration of paleo and contemporary data  
- Plot-based vegetation records (not just species occurrences)  
- Sample-specific climate and soil context  
- Standardised taxonomy and harmonised trait domains

## 🛠️Controls

- Access via `{vaultkeepr}` R package  
- SQL-free, tidyverse-compatible interface  
- Fully reproducible workflows via GitHub and Zenodo

## 💡Side Quests

- Additional use cases:
  - Explore biome transitions and trait shifts  
  - Test trait–environment relationships across time  
  - Quantify ecological novelty and functional turnover  
  - Reconstruct long-term diversity patterns  
  - Investigate trait-based community assembly

## 🏆Summary

- VegVault = open, robust, time-spanning vegetation research platform  
- Designed for reproducible, interdisciplinary ecological synthesis  
- *Join the quest – the tools are ready, and the map is open!*

## 📜Credits

- Website, ORCID, GitHub, and Lab links  
- QR codes and short URLs for quick access  
- Acknowledgements to collaborators, funders, and data providers

## 🎯Bonus Stage

- Optional backup slides:
  - VegVault database schema

